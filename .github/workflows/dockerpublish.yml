name: Docker

on:
  push:
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: wappalyzer-api

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Run the wappalyzer image
        run: docker run -d -p 3000:3000 --name wappalyzer $IMAGE_NAME

      - name: Test the application
        run: |
          sleep 10
          # We run the curl command a first time to get the output
          curl 'http://localhost:3000/extract?url=http://localhost:3000'
          if curl --fail 'http://localhost:3000/extract?url=http://localhost:3000'; then
            echo "Curl command succeeded."
          else
            echo "Curl command failed. Fetching docker logs..."
            docker logs wappalyzer
            exit 1
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: minor

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Use the new tag
          VERSION=${{ steps.tag_version.outputs.new_version }}
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          # Tag and push image with the version tag
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          # Tag and push image with the 'latest' tag
          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
